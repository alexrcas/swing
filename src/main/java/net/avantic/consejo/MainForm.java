/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package net.avantic.consejo;

import net.avantic.consejo.gui.panel.JPunto;
import net.avantic.consejo.util.HibernateUtil;
import java.awt.*;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.Optional;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.*;
import net.avantic.consejo.gui.panel.JActaConsejoAnterior;
import net.avantic.consejo.gui.panel.JCrearPuntoModal;
import net.avantic.consejo.gui.panel.JGenerarDocumentoModal;
import net.avantic.consejo.gui.panel.JIndice;
import net.avantic.consejo.gui.panel.JPortada;
import net.avantic.consejo.gui.panel.JSincronizarDocumentosModal;
import net.avantic.consejo.model.Documento;
import net.avantic.consejo.model.Portada;
import net.avantic.consejo.model.Punto;
import net.avantic.consejo.service.DocumentoService;
import net.avantic.consejo.service.GenerarDocumentoService;
import net.avantic.consejo.service.PuntoService;
import net.avantic.consejo.service.SyncService;
import org.hibernate.Session;

/**
 *
 * @author alexr
 */
public class MainForm extends JFrame {

    private PuntoService puntoService;
    private DocumentoService documentoService;
    private GenerarDocumentoService generarDocumentoService;
    private SyncService syncService;
    private JPortada jPortada;
    private JIndice jIndice;
    private JActaConsejoAnterior jActaConsejoAnterior;

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        this.puntoService = new PuntoService();
        this.documentoService = new DocumentoService();
        this.generarDocumentoService = new GenerarDocumentoService();
        this.syncService = new SyncService();
        
        initComponents();
        
        this.pintarPortada();
        
        this.pintarIndice();
        
        this.pintarActaConsejoAnterior();
        
        this.syncButton.setIcon(new ImageIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/sync.png")).getImage()
            .getScaledInstance(16, 16, Image.SCALE_SMOOTH))); // NOI18
        
        this.jScrollPane1.setPreferredSize(new Dimension(800, 600));
        this.jScrollPane1.getVerticalScrollBar().setUnitIncrement(16);
        this.mainPanel.setLayout(new BoxLayout(this.mainPanel, BoxLayout.Y_AXIS));

        this.actualizarPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        generarButton = new javax.swing.JButton();
        syncButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Consejo");
        setBackground(new java.awt.Color(255, 255, 255));
        setMinimumSize(new java.awt.Dimension(1100, 600));
        setPreferredSize(new java.awt.Dimension(1100, 600));
        setSize(new java.awt.Dimension(1100, 600));

        jScrollPane1.setBackground(new java.awt.Color(102, 204, 255));

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.setMinimumSize(new java.awt.Dimension(800, 600));

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 971, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 800, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(mainPanel);

        jButton1.setText("Nuevo Punto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        generarButton.setText("Generar Documento");
        generarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generarButtonActionPerformed(evt);
            }
        });

        syncButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                syncButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(syncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(generarButton)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(syncButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(generarButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        JCrearPuntoModal modal = new JCrearPuntoModal();
        int seleccion = JOptionPane.showConfirmDialog(this, modal, "Nuevo Punto", JOptionPane.OK_CANCEL_OPTION);
        
        if (seleccion == 0) {
            String nombre = modal.getNombreTextField().getText();
            String descripcion = modal.getDescripcionTextField().getText();
            
            Punto punto = new Punto(nombre, descripcion);
            this.puntoService.saveOrUpdate(punto);
        }
        
        this.actualizarPanel();
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void generarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generarButtonActionPerformed
  
        
        ArrayList<Documento> documentos = this.puntoService.listPuntos().stream()
                .sorted(Comparator.comparingLong(Punto::getPosicion))
                .map(documentoService::listDocumentosByPuntoOrderByPosicion)
                .flatMap(ArrayList::stream)
                .collect(Collectors.toCollection(ArrayList::new));

                
        JGenerarDocumentoModal modal = new JGenerarDocumentoModal(documentos);
        int seleccion = JOptionPane.showConfirmDialog(this, modal, "Generar Documento", JOptionPane.OK_CANCEL_OPTION);
        
        if (seleccion == 0) {
            try {
                this.generarDocumentoService.generarDocumento(documentos);
            } catch (IOException ex) {
                Logger.getLogger(MainForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_generarButtonActionPerformed

    private void syncButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_syncButtonActionPerformed

        ArrayList<Documento> documentosNoSincronizados = this.syncService.listDocumentosNoSincronizados();
        
        JSincronizarDocumentosModal modal = new JSincronizarDocumentosModal(documentosNoSincronizados);
        
        int seleccion = JOptionPane.showConfirmDialog(this, modal, "Sincronizar Documentos", JOptionPane.OK_CANCEL_OPTION);
        
        if (seleccion == 0) {
            this.syncService.sincronizarDocumentos();
        }
        
    }//GEN-LAST:event_syncButtonActionPerformed

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }
    
    
    private void actualizarPanel() {
        ArrayList<Punto> puntosList = this.obtenerPuntos();
        this.pintarPuntos(puntosList);
    }
    
    
    private void pintarPortada() {
        jPortada = new JPortada(this);
        this.jPortada.setBorder(BorderFactory.createLineBorder(Color.gray));
    }
    
    
    private void pintarIndice() {
        jIndice = new JIndice(this);
        this.jIndice.setBorder(BorderFactory.createLineBorder(Color.gray));
    }
    
    
    private void pintarActaConsejoAnterior() {
        jActaConsejoAnterior = new JActaConsejoAnterior(this);
        this.jActaConsejoAnterior.setBorder(BorderFactory.createLineBorder(Color.gray));
    }
    
    
    private ArrayList<Punto> obtenerPuntos() {
        return this.puntoService.listPuntos().stream()
                .sorted(Comparator.comparing(Punto::getPosicion))
                .collect(Collectors.toCollection(ArrayList::new));
    }
    

    private void pintarPuntos(ArrayList<Punto> puntosOrdenadosPosicion) {
        this.mainPanel.removeAll();
        
        this.pintarPuntoPortada();
        this.pintarPuntoIndice();
        this.pintarPuntoActaConsejoAnterior();

        Long cnt = 1L;
        for (Punto punto : puntosOrdenadosPosicion) {
            JPunto jpunto = new JPunto(this, punto, cnt);
            jpunto.setBorder(BorderFactory.createLineBorder(Color.gray));
            this.mainPanel.add(jpunto);
            cnt++;
        }
        
        this.mainPanel.revalidate();
        this.mainPanel.repaint();
    }
    
    
    private void pintarPuntoPortada() {
        this.mainPanel.add(this.jPortada);
        this.mainPanel.revalidate();
        this.mainPanel.repaint();
    }
    
    
    private void pintarPuntoIndice() {
        this.mainPanel.add(this.jIndice);
        this.mainPanel.revalidate();
        this.mainPanel.repaint();
    }
    
    private void pintarPuntoActaConsejoAnterior() {
        this.mainPanel.add(this.jActaConsejoAnterior);
        this.mainPanel.revalidate();
        this.mainPanel.repaint();
    }
    
    
    public void delete(Punto punto) {
        this.documentoService.listDocumentosByPunto(punto).stream()
                .forEach(this.documentoService::eliminarDocumento);
        this.puntoService.delete(punto);
        
        this.actualizarPanel();
    }
    
    
    public void ordenarSubir(Punto punto) {
        Optional<Punto> puntoSiguiente = this.puntoService.listPuntos().stream()
        .sorted((a, b) -> b.getPosicion().compareTo(a.getPosicion()))
        .filter(p -> p.getPosicion() < punto.getPosicion())
        .findFirst();

        if (!puntoSiguiente.isPresent())
            return;
        
        Long posicion = punto.getPosicion();
        punto.setPosicion(puntoSiguiente.get().getPosicion());
        puntoSiguiente.get().setPosicion(posicion);
        
        this.puntoService.saveOrUpdate(punto);
        this.puntoService.saveOrUpdate(puntoSiguiente.get());
        
        this.actualizarPanel();
    }
    
    
    public void ordenarBajar(Punto punto) {
        Optional<Punto> puntoSiguiente = this.puntoService.listPuntos().stream()
                .filter(p -> p.getPosicion() > punto.getPosicion())
                .sorted(Comparator.comparingLong(Punto::getPosicion))
                .findFirst();
        
        if (!puntoSiguiente.isPresent())
            return;
        
        Long posicion = punto.getPosicion();
        punto.setPosicion(puntoSiguiente.get().getPosicion());
        puntoSiguiente.get().setPosicion(posicion);
        
        this.puntoService.saveOrUpdate(punto);
        this.puntoService.saveOrUpdate(puntoSiguiente.get());
        
        this.actualizarPanel();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton generarButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton syncButton;
    // End of variables declaration//GEN-END:variables
}
